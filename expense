#!/usr/bin/env node

const { Client } = require("pg");
const PROCESS = require("process");
// { argv, exit } 


class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expenses' });
  }
  logAndExit(err) {
    console.log(err);
    PROCESS.exit(1);
  }
  displayTableData(data) {
    data.rows.forEach(obj => {
      console.log(`${obj.id} | ${obj.created_on.toDateString().padStart(10)} |  ${obj.amount.padStart(12)}  | ${obj.memo}`);
    });
  }
  async displayList() {
    await this.client.connect().catch(error => this.logAndExit(error));

    let queryText = "SELECT * FROM expenses";
    let data = await this.client.query(queryText).catch(error => {
      console.log(error);
      PROCESS.exit();
    });
    this.displayTableData(data);
    this.client.end();
  }
  async addExpenses(amount, memo) {
    await this.client.connect().catch(error => this.logAndExit(error));

    let queryText = `INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, NOW())`;

    await this.client.query(queryText, [amount, memo]).catch(error => this.logAndExit(error));

    this.client.end();
  }
  async displayCommands() {
    await this.client.connect().catch(error => this.logAndExit(error));

    let commands = "An expense recording system\n\n\n" +
      "Commands:\n\nadd AMOUNT MEMO [DATE] - record a new expense\n" +
      "clear - delete all expenses\n" +
      "list - list all expenses\n" +
      "delete NUMBER - remove expense with id NUMBER\n" +
      "search QUERY - list expenses with a matching memo field";
    console.log(commands);
    this.client.end();
  }
  async searchExpense(item) {
    await this.client.connect().catch(error => this.logAndExit(error));
    let queryMessage = "SELECT * FROM expenses WHERE memo = $1"

    let data = await this.client.query(queryMessage, [item]);
    displayTableData(data)
    console.log(data);
    this.client.end();
  }

}

class CLI {
  constructor() {
    this.appliction = new ExpenseData();
  }
  run(args) {
    if (args[2] === 'list') {
      this.appliction.displayList();
    } else if (args[2] === 'add') {
      if (args[3] === undefined || args[4] === undefined) {
        console.log('You must provide an amount and memo.');
      } else {
        this.appliction.addExpenses(args[3], args[4]);
      }
    } else if (args[2] === 'search') {
      console.log('here');
      console.log(this.application);
      this.application.searchExpense(args[3]);
    } else {
      this.appliction.displayCommands();
    };
  }
}


let cli = new CLI();
cli.run(PROCESS.argv);


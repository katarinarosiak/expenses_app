#!/usr/bin/env node

const { Client } = require("pg");
const PROCESS = require("process");
const readline = require("readline-sync");
// { argv, exit } 


class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expenses' });
  }
  async setup_schema() {
    await this.client.connect().catch(error => this.logAndExit(error));

    let queryText = `SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses`;

    await this.client.query(queryText).catch(error => this.logAndExit(error));
    this.client.end().catch(err => this.logAndExit(err));;
  }

  logAndExit(err) {
    console.log(err);
    PROCESS.exit(1);
  }
  displayTableData(data, sum) {

    let amountOfExpenses = data.rows.length;

    console.log(`There ${amountOfExpenses === 1 ? 'is' : 'are'} ${amountOfExpenses} expense${amountOfExpenses === 1 ? '' : 's'}.`);
    data.rows.forEach(obj => {
      console.log(`${obj.id} | ${obj.created_on.toDateString().padStart(10)} |  ${obj.amount.padStart(12)}  | ${obj.memo}`);
    });
    if (sum) {
      console.log(`${'-'.repeat(70)}`);
      console.log(`  Total: ${sum.padStart(27)}`);
    }
  }
  async displayList() {
    await this.client.connect().catch(error => this.logAndExit(error));

    await this.setup_schema().catch(error => this.logAndExit(error));
    let queryText = "SELECT * FROM expenses";
    let data = await this.client.query(queryText).catch(error => {
      console.log(error);
      PROCESS.exit();
    });

    if (data.rows.length > 0) {
      let queryMessage = "SELECT SUM(amount) FROM expenses;";
      let sum = await this.client.query(queryMessage).catch(error => this.logAndExit(error));

      this.displayTableData(data, sum.rows[0].sum);
    } else {
      console.log('There are no expenses.');
    }


    this.client.end().catch(err => this.logAndExit(err));
  }
  async addExpenses(amount, memo) {
    await this.client.connect().catch(error => this.logAndExit(error))

    await this.setup_schema().catch(error => this.logAndExit(error));
    let queryText = `INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, NOW())`;

    await this.client.query(queryText, [amount, memo]).catch(error => this.logAndExit(error));

    this.client.end().catch(err => this.logAndExit(err));;
  }

  async displayCommands() {
    await this.client.connect().catch(error => this.logAndExit(error));

    let commands = "An expense recording system\n\n\n" +
      "Commands:\n\nadd AMOUNT MEMO [DATE] - record a new expense\n" +
      "clear - delete all expenses\n" +
      "list - list all expenses\n" +
      "delete NUMBER - remove expense with id NUMBER\n" +
      "search QUERY - list expenses with a matching memo field";
    console.log(commands);
    this.client.end().catch(err => this.logAndExit(err));;
  }
  async searchExpense(item) {
    await this.client.connect().catch(error => this.logAndExit(error));

    await this.setup_schema().catch(error => this.logAndExit(error));
    let queryMessage = "SELECT * FROM expenses WHERE memo ILIKE $1";
    let data = await this.client.query(queryMessage, [`%${item}%`])
      .catch(err => this.logAndExit(err));

    if (data.rows.length === 0) {
      console.log('There are no expenses.');
    } else {
      let queryMessageSum = "SELECT SUM(amount) FROM expenses WHERE memo ILIKE $1";
      let sum = await this.client.query(queryMessageSum, [`%${item}%`]).catch(error => this.logAndExit(error))

      this.displayTableData(data, sum.rows[0].sum);
    }

    this.client.end().catch(err => this.logAndExit(err));;
  }
  async deleteExpense(id) {
    await this.client.connect().catch(error => this.logAndExit(error));

    await this.setup_schema().catch(error => this.logAndExit(error));
    let queryMessageSelect = "SELECT * FROM expenses WHERE id = $1";
    let queryMessageDelete = "DELETE FROM expenses WHERE id = $1";
    let data = await this.client.query(queryMessageSelect, [id]).catch(error => this.logAndExit(error))

    if (data.rows.length === 0) {
      console.log(`There is no expense with the id ${id}.`);
    } else {
      await this.client.query(queryMessageDelete, [id]).catch(error => this.logAndExit(error));
      console.log("The following expense has been deleted:");
      this.displayTableData(data);
    }

    this.client.end().catch(err => this.logAndExit(err));;
  }
  async clearAllExpenses() {
    await this.client.connect().catch(error => this.logAndExit(error));
    console.log("This will remove all expenses. Are you sure? (enter y to confirm)");
    let userAnswer = readline.prompt();

    await this.setup_schema().catch(error => this.logAndExit(error));
    if (userAnswer.toLowerCase() === 'y') {
      let queryMessage = "DELETE FROM expenses";
      await this.client.query(queryMessage).catch(error => this.logAndExit(error))
    }

    this.client.end().catch(err => this.logAndExit(err));;
  }
  async sumExpenses() {
    await this.client.connect().catch(error => this.logAndExit(error));

    await this.setup_schema().catch(error => this.logAndExit(error));
    let queryMessage = "SELECT SUM(amount) FROM expense;";
    let data = await this.client.query(queryMessage).catch(error => this.logAndExit(error));

    console.log(data.rows[0]);
    this.client.end().catch(err => this.logAndExit(err));;
  }

}

class CLI {
  constructor() {
    this.appliction = new ExpenseData();
    this.app = 'hello';
  }
  run(args) {
    if (args[2] === 'list') {
      this.appliction.displayList();
    } else if (args[2] === 'add') {
      if (args[3] === undefined || args[4] === undefined) {
        console.log('You must provide an amount and memo.');
      } else {
        this.appliction.addExpenses(args[3], args[4]);
      }
    } else if (args[2] === 'search') {
      this.appliction.searchExpense(args[3]);
    } else if (args[2] === 'delete') {
      this.appliction.deleteExpense(args[3]);
    } else if (args[2] === 'clear') {
      this.appliction.clearAllExpenses();
    } else {
      this.appliction.displayCommands();
    };
  }
}


let cli = new CLI();
cli.run(PROCESS.argv);



// async searchExpenses(query) {
//   await this.client.connect().catch(err => logAndExit(err));

//   let queryText = 'SELECT * FROM expenses WHERE memo ILIKE $1'
//   let res = await this.client.query(queryText, [`%${query}%`])
//   //  .catch(err => logAndExit(err));
//   this.displayCount(res.rowCount);
//   this.displayExpenses(res.rows);
//   if (res.rowCount > 1) {
//     this.displayTotal(res.rows);
//   }

//   await this.client.end().catch(err => logAndExit(err));
// }